// Migration #1: BulkInsert1
// =========================

// this is the first iteration of our dummy data. 

// to add this data, be sure of these two things first:
//
// A) you've globally installed the sequelize cli
//     $ npm install -g sequelize
// B) you've globally installed the mysql node package
//     $ npm install -g mysql

// To add the data with the sequelize cli, run this command
//    $ sequelize db:migrate
//
// PLEASE DO NOT USE sequelize db:migrate:undo without notifying Steve,
//   unless you're using a local db.
//
// PLEASE DO NOT EDIT THIS FILE:
//  if you want something changed, notify Steve, 
//  who will produce a second migration file.

'use strict';

// bring in all of our models from the models directory
var models = require('../models');


// GLOBALS
// =========

// function to add 28 diet progress reports to db
function addProgress(user, diet) {

  // create a transaction
  return models.sequelize.transaction(function () {
    // in the transaction, save promises in this empty array
    var promises = [];
    // for 28 iterations, 
    for (var i = 0; i < 28; i++) {
      // create one of the 28 progress reports, saving it as a promise
      var newPromise = models.DietProgress.create({
        q1: "How's your mood?",
        a1: null,
        q2: "How's your energy?",
        a2: null,
        q3: "What was your weight today?",
        a3: null,
        reportDay: (Date.now() - (86400000 * 4)  + (86400000 * i))
        // ^^^ the current day, minus 5 days, plus one day times the value of i
      })
      // then, with the dietProg passed,
      .then(function(dietProg){
        // set the user to the user argument of addProgress
        return dietProg.setUser(user)
        // then, 
        .then(function(){
          // set the diet to the diet argument of addProgress
          return dietProg.setDiet(diet)
        })
      })
      // push each promise to the newPromise array
      promises.push(newPromise);
    }
    // then, fulfill each sequelize promise,
    // or, in other words, create all 28 notifications
    return Promise.all(promises).then(function(result){console.log(result)});
  })
}

// our migration:
module.exports = {
  // when running the sequelize migration command, do the following
  up: function (queryInterface, Sequelize) {

    // create frank
    return models.User.create({
      username: "Frank",
      email: "Frank@me.com",
      password: "fake",
      firstname:"Frank",
      lastname: "Frankenstein",
      gender: "male",
    })
    // pass frank
    .then(function(frank){
      // create jasmin
      return models.User.create({
        username: "Jasmine",
        email: "Jasmine@me.com",
        password: "fake",
        firstname:"Jasmine",
        lastname: "Jasperson",
        gender: "female",
      })
      // pass jasmin
      .then(function(jasmine){
        // create a diet, 
        return models.Diet.create({
          name: "Two Banana Diet",
          description: "Eat two bananas in the morning " +
                       "and don't passout from hunger. " +
                       "Repeat for 28 days.",
        })
        // pass the diet
        .then(function(diet){
          // associate diet with users
          return diet.addUsers([frank, jasmine])
          // then...
          .then(function(){
            // create 28 notifications for frank
            return addProgress(frank, diet)
            // and finally
            .then(function(){
              // create 28 notifications for jasmine (see addProgress)
              return addProgress(jasmine, diet)
            })
          })
        })
      })
    })
  },



  // when running db:migration:undo, do the following.
  down: function (queryInterface, Sequelize) {
    // first, find the banana diet
    return models.Diet.findOne({where: {name: "Two Banana Diet"}})
    // then
    .then(function(diet) {
      // once we have the instances, find it's users
      return diet.getUsers()
      // then
      .then(function(users){
        // with the diets and users grabbed, destroy the DietProgresses
        return models.DietProgress.destroy(
          {
            where: {
              UserId: users[0].id,
              DietId: diet.id,
            }
          }
        ).then(function(){
          return models.DietProgress.destroy(
            {
              where: {
                UserId: users[1].id,
                DietId: diet.id,
              }
            }
          )
          // then
          .then(function(){
            // map each user in the array
            return users.map(function(item, index){
              // and destroy each user
              return item.destroy();
            })
          })
          // then
          .then(function(){
            // destroy the diet
            return diet.destroy()
          })
        })
      })
    })

    // then go into each table and set Auto Increment to the lowest possible number,
    // basically freeing up the id numbers once taken by each destroyed entry
    .then(function(){
      return queryInterface.sequelize.query("ALTER TABLE Diets AUTO_INCREMENT=1")
    })
    .then(function(){
      return queryInterface.sequelize.query("ALTER TABLE Users AUTO_INCREMENT=1")
    })
    .then(function(){
      return queryInterface.sequelize.query("ALTER TABLE DietProgresses AUTO_INCREMENT=1")
    })
  }
};